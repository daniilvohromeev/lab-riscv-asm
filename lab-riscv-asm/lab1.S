.data
matrix:
    .word 1, 2, 3, 4    # Определяем матрицу 4x4
    .word 5, 6, 7, 8
    .word 9, 10, 11, 12
    .word 13, 14, 15, 16

.text
.globl main
main:
    # Инициализация сумм
    li x10, 0           # Устанавливаем сумму элементов по основной диагонали в 0
    li x11, 0           # Устанавливаем сумму элементов по побочной диагонали в 0

    # Установка указателя на начало матрицы
    la x5, matrix       # x5 теперь указывает на начало матрицы

    # Инициализация счетчика цикла
    li x6, 0            # x6 используется как счетчик цикла (индекс)

loop:
    # Проверка условия окончания цикла
    li x7, 4            # x7 хранит размер матрицы (4)
    bge x6, x7, end_loop # Если x6 >= x7, переходим к end_loop

    # Вычисление смещения для основной диагонали (i * 5)
    slli x8, x6, 2      # x8 = i * 4 (размер слова)
    add x8, x8, x6      # x8 = i * 5
    slli x8, x8, 2      # x8 = i * 5 * 4 (смещение в байтах)

    # Загрузка элемента из основной диагонали и добавление к x10
    add x9, x5, x8      # x9 = адрес matrix[i][i]
    lw x12, 0(x9)       # x12 = matrix[i][i]
    add x10, x10, x12   # Добавляем значение к сумме по основной диагонали

    # Вычисление смещения для побочной диагонали (i * 3 + 3)
    li x13, 3
    mul x13, x6, x13    # x13 = i * 3
    addi x13, x13, 3    # x13 = i * 3 + 3
    slli x13, x13, 2    # x13 = (i * 3 + 3) * 4 (смещение в байтах)

    # Загрузка элемента из побочной диагонали и добавление к x11
    add x14, x5, x13    # x14 = адрес matrix[i][3-i]
    lw x15, 0(x14)      # x15 = matrix[i][3-i]
    add x11, x11, x15   # Добавляем значение к сумме по побочной диагонали

    # Инкремент счетчика цикла
    addi x6, x6, 1
    j loop

end_loop:
    mv a2, x10         # Перемещаем сумму основной диагонали в a2
    mv a3, x11         # Перемещаем сумму побочной диагонали в a3

    # Вывод суммы основной диагонали
    mv a1, a2          # Перемещаем сумму основной диагонали в a1 для вывода
    li a0, 1           # Устанавливаем файловый дескриптор для стандартного вывода
    ecall              # Вызываем системный вызов для вывода числа

    # Вывод пробела
    addi a0, x0, 11    # Устанавливаем системный вызов для вывода символа
    addi a1, x0, 32    # ASCII код пробела
    ecall              # Вызываем системный вызов

    # Вывод суммы побочной диагонали
    mv a1, a3          # Перемещаем сумму побочной диагонали в a1 для вывода
    li a0, 1           # Устанавливаем файловый дескриптор для стандартного вывода
    ecall              # Вызываем системный вызов для вывода числа

    # Вывод перевода строки
    addi a0, x0, 11    # Устанавливаем системный вызов для вывода символа
    addi a1, x0, 10    # ASCII код перевода строки
    ecall              # Вызываем системный вызов

    # Завершение программы
    addi a0, x0, 10
    ecall
